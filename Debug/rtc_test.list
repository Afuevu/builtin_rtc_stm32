
rtc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001768  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001874  08001874  00011874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018c8  080018c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018c8  080018c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018c8  080018c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018c8  080018c8  000118c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018cc  080018cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  080018dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080018dc  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003442  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010a0  00000000  00000000  00023477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00024518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00024948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f24  00000000  00000000  00024cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005718  00000000  00000000  0003bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f601  00000000  00000000  0004130c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c090d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea0  00000000  00000000  000c0960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800185c 	.word	0x0800185c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800185c 	.word	0x0800185c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
#include "rtc.h"

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
uint8_t hours,minutes,seconds = 0;
int main(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_Init();
 8000514:	f000 fc52 	bl	8000dbc <HAL_Init>

	SystemClock_Config();
 8000518:	f000 f884 	bl	8000624 <SystemClock_Config>
	MX_GPIO_Init();
 800051c:	f000 f8c8 	bl	80006b0 <MX_GPIO_Init>
	timer4_Init();
 8000520:	f000 fa42 	bl	80009a8 <timer4_Init>
	uart_init();
 8000524:	f000 fa86 	bl	8000a34 <uart_init>
	rtc_init();
 8000528:	f000 f8de 	bl	80006e8 <rtc_init>
	RCC->APB2ENR |= 1 << 2;
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <main+0xe8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a31      	ldr	r2, [pc, #196]	; (80005f8 <main+0xe8>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= ~(0x0F << 12); // ON BOARD LED
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <main+0xec>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a2f      	ldr	r2, [pc, #188]	; (80005fc <main+0xec>)
 800053e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000542:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x03 << 12);
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <main+0xec>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a2c      	ldr	r2, [pc, #176]	; (80005fc <main+0xec>)
 800054a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800054e:	6053      	str	r3, [r2, #4]
delay_ms(1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 f9ec 	bl	8000930 <delay_ms>
rtc_wrtie(23, 59, 30);
 8000558:	221e      	movs	r2, #30
 800055a:	213b      	movs	r1, #59	; 0x3b
 800055c:	2017      	movs	r0, #23
 800055e:	f000 f935 	bl	80007cc <rtc_wrtie>
delay_ms(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 f9e3 	bl	8000930 <delay_ms>
	while (1) {
		if (temp_uart_data == 'B') {
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <main+0xf0>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b42      	cmp	r3, #66	; 0x42
 8000570:	d137      	bne.n	80005e2 <main+0xd2>
			rtc_read(&hours, &minutes, &seconds);
 8000572:	4a24      	ldr	r2, [pc, #144]	; (8000604 <main+0xf4>)
 8000574:	4924      	ldr	r1, [pc, #144]	; (8000608 <main+0xf8>)
 8000576:	4825      	ldr	r0, [pc, #148]	; (800060c <main+0xfc>)
 8000578:	f000 f96a 	bl	8000850 <rtc_read>
			temp_uart_data = 0;
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0xf0>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
			uart_printf("hours: ");
 8000582:	4823      	ldr	r0, [pc, #140]	; (8000610 <main+0x100>)
 8000584:	f000 fad0 	bl	8000b28 <uart_printf>
			uart_printn(hours);
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <main+0xfc>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff47 	bl	8000420 <__aeabi_ui2f>
 8000592:	4603      	mov	r3, r0
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fadd 	bl	8000b54 <uart_printn>
			uart_printf("         ");
 800059a:	481e      	ldr	r0, [pc, #120]	; (8000614 <main+0x104>)
 800059c:	f000 fac4 	bl	8000b28 <uart_printf>

			uart_printf("minutes: ");
 80005a0:	481d      	ldr	r0, [pc, #116]	; (8000618 <main+0x108>)
 80005a2:	f000 fac1 	bl	8000b28 <uart_printf>
			uart_printn(minutes);
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0xf8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff38 	bl	8000420 <__aeabi_ui2f>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 face 	bl	8000b54 <uart_printn>
			uart_printf("         ");
 80005b8:	4816      	ldr	r0, [pc, #88]	; (8000614 <main+0x104>)
 80005ba:	f000 fab5 	bl	8000b28 <uart_printf>
			uart_printf("seconds: ");
 80005be:	4817      	ldr	r0, [pc, #92]	; (800061c <main+0x10c>)
 80005c0:	f000 fab2 	bl	8000b28 <uart_printf>
			uart_printn(seconds);
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <main+0xf4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff29 	bl	8000420 <__aeabi_ui2f>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fabf 	bl	8000b54 <uart_printn>
			uart_printf("         ");
 80005d6:	480f      	ldr	r0, [pc, #60]	; (8000614 <main+0x104>)
 80005d8:	f000 faa6 	bl	8000b28 <uart_printf>
			uart_printf("\r\n");
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x110>)
 80005de:	f000 faa3 	bl	8000b28 <uart_printf>
		}
		GPIOA->ODR ^= (1 << 11);
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <main+0xec>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <main+0xec>)
 80005e8:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 80005ec:	60d3      	str	r3, [r2, #12]
		delay_ms(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f000 f99e 	bl	8000930 <delay_ms>
		if (temp_uart_data == 'B') {
 80005f4:	e7b9      	b.n	800056a <main+0x5a>
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	20000030 	.word	0x20000030
 8000604:	2000002a 	.word	0x2000002a
 8000608:	20000029 	.word	0x20000029
 800060c:	20000028 	.word	0x20000028
 8000610:	08001874 	.word	0x08001874
 8000614:	0800187c 	.word	0x0800187c
 8000618:	08001888 	.word	0x08001888
 800061c:	08001894 	.word	0x08001894
 8000620:	080018a0 	.word	0x080018a0

08000624 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b090      	sub	sp, #64	; 0x40
 8000628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	2228      	movs	r2, #40	; 0x28
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f90a 	bl	800184c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000662:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fceb 	bl	8001048 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x58>
		Error_Handler();
 8000678:	f000 f830 	bl	80006dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff58 	bl	800154c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x82>
		Error_Handler();
 80006a2:	f000 f81b 	bl	80006dc <Error_Handler>
	}
}
 80006a6:	bf00      	nop
 80006a8:	3740      	adds	r7, #64	; 0x40
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_GPIO_Init+0x28>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <MX_GPIO_Init+0x28>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_GPIO_Init+0x28>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <rtc_init>:
#define CR_DBP (1U<<8)
#define CSR_LSION (1U<<0)
#define CSR_LSIRDY (1U<<0)
#define BDCR_BDRST (1U<<16)
#define BDCR_RCCEN (1U<<15)
void rtc_init(void) {
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	/* Enable clcck accss to PWR and BKPEN*/
	RCC->APB1ENR |= 1 << 28;
 80006ec:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <rtc_init+0xd8>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	4a33      	ldr	r2, [pc, #204]	; (80007c0 <rtc_init+0xd8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= 1 << 27;
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <rtc_init+0xd8>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <rtc_init+0xd8>)
 80006fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000702:	61d3      	str	r3, [r2, #28]
	// Enable backup access t config RTC
	PWR->CR |= CR_DBP;
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <rtc_init+0xdc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <rtc_init+0xdc>)
 800070a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800070e:	6013      	str	r3, [r2, #0]
	//Enable low speed internal(LSi)
	RCC->CSR |= CSR_LSION;
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <rtc_init+0xd8>)
 8000712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000714:	4a2a      	ldr	r2, [pc, #168]	; (80007c0 <rtc_init+0xd8>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6253      	str	r3, [r2, #36]	; 0x24
	// wait for LSI to be ready
	while ((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY) {
 800071c:	bf00      	nop
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <rtc_init+0xd8>)
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	2b01      	cmp	r3, #1
 8000728:	d1f9      	bne.n	800071e <rtc_init+0x36>
	}
	//force backup domain reset
	RCC->BDCR |= BDCR_BDRST;
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <rtc_init+0xd8>)
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <rtc_init+0xd8>)
 8000730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000734:	6213      	str	r3, [r2, #32]
	//release backup domain reset
	RCC->BDCR &= ~BDCR_BDRST;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <rtc_init+0xd8>)
 8000738:	6a1b      	ldr	r3, [r3, #32]
 800073a:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <rtc_init+0xd8>)
 800073c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000740:	6213      	str	r3, [r2, #32]
	//set rtc clock source to lsi
	RCC->BDCR &= ~(1U << 8);
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <rtc_init+0xd8>)
 8000744:	6a1b      	ldr	r3, [r3, #32]
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <rtc_init+0xd8>)
 8000748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800074c:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= (1U << 9);
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <rtc_init+0xd8>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <rtc_init+0xd8>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000758:	6213      	str	r3, [r2, #32]
	//enable the rtc
	RCC->BDCR |= BDCR_RCCEN;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <rtc_init+0xd8>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <rtc_init+0xd8>)
 8000760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000764:	6213      	str	r3, [r2, #32]

	// Ensure that the registers are synchronized
	RTC->CRL &= ~(1 << 3);
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <rtc_init+0xe0>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <rtc_init+0xe0>)
 800076c:	f023 0308 	bic.w	r3, r3, #8
 8000770:	6053      	str	r3, [r2, #4]
	while ((RTC->CRL & (1 << 3)) == 0) {
 8000772:	bf00      	nop
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <rtc_init+0xe0>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <rtc_init+0x8c>
	}

	// set CNF bit to enter configuration mode
	RTC->CRL |= (1 << 4);
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <rtc_init+0xe0>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <rtc_init+0xe0>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6053      	str	r3, [r2, #4]
	/*// Set the prescaler to achieve 1 Hz from the 32.768 kHz LSE
	 RTC->PRLH = 0;
	 RTC->PRLL = 32767;*/

	// Set the prescaler to achieve 1 Hz from the 40 kHz LSE
	RTC->PRLH = 0;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <rtc_init+0xe0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 39999;
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <rtc_init+0xe0>)
 8000794:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000798:	60da      	str	r2, [r3, #12]

	//exit the configuration mode
	RTC->CRL &= ~(1 << 4);
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <rtc_init+0xe0>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <rtc_init+0xe0>)
 80007a0:	f023 0310 	bic.w	r3, r3, #16
 80007a4:	6053      	str	r3, [r2, #4]

	while ((RTC->CRL & (1 << 5)) == 0)
 80007a6:	bf00      	nop
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <rtc_init+0xe0>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 0320 	and.w	r3, r3, #32
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f9      	beq.n	80007a8 <rtc_init+0xc0>
		;
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40007000 	.word	0x40007000
 80007c8:	40002800 	.word	0x40002800

080007cc <rtc_wrtie>:

void rtc_wrtie(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	460b      	mov	r3, r1
 80007d8:	71bb      	strb	r3, [r7, #6]
 80007da:	4613      	mov	r3, r2
 80007dc:	717b      	strb	r3, [r7, #5]
	// check if the last write operation is sucessful
	while ((RTC->CRL & (1 << 5)) == 0)
 80007de:	bf00      	nop
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <rtc_wrtie+0x80>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f9      	beq.n	80007e0 <rtc_wrtie+0x14>
		;

	// set CNF bit to enter configuration mode
	RTC->CRL |= (1 << 4);
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <rtc_wrtie+0x80>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <rtc_wrtie+0x80>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6053      	str	r3, [r2, #4]

	//set the time
	uint32_t time_in_seconds = (hours * 3600) + (minutes * 60) + seconds;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80007fe:	fb02 f103 	mul.w	r1, r2, r3
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	4613      	mov	r3, r2
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	1a9b      	subs	r3, r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	18ca      	adds	r2, r1, r3
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	4413      	add	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

	RTC->CNTH = time_in_seconds >> 16;
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <rtc_wrtie+0x80>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	0c1b      	lsrs	r3, r3, #16
 800081a:	6193      	str	r3, [r2, #24]
	RTC->CNTL = time_in_seconds & 0xFFFF;
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <rtc_wrtie+0x80>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	b29b      	uxth	r3, r3
 8000822:	61d3      	str	r3, [r2, #28]

	//exit the configuration mode
	RTC->CRL &= ~(1 << 4);
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <rtc_wrtie+0x80>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <rtc_wrtie+0x80>)
 800082a:	f023 0310 	bic.w	r3, r3, #16
 800082e:	6053      	str	r3, [r2, #4]

	// check if the last write operation is sucessful
	while ((RTC->CRL & (1 << 5)) == 0)
 8000830:	bf00      	nop
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <rtc_wrtie+0x80>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 0320 	and.w	r3, r3, #32
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f9      	beq.n	8000832 <rtc_wrtie+0x66>
		;

}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40002800 	.word	0x40002800

08000850 <rtc_read>:

void rtc_read(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	uint32_t time_counter;

	// Read the RTC counter value
	time_counter = ((uint32_t) (RTC->CNTH << 16)) | RTC->CNTL;
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <rtc_read+0x90>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	041a      	lsls	r2, r3, #16
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <rtc_read+0x90>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4313      	orrs	r3, r2
 8000868:	617b      	str	r3, [r7, #20]

	if (time_counter >= 86400) {
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <rtc_read+0x94>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d909      	bls.n	8000886 <rtc_read+0x36>
		time_counter %= 86400;
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <rtc_read+0x98>)
 8000876:	fba2 1203 	umull	r1, r2, r2, r3
 800087a:	0c12      	lsrs	r2, r2, #16
 800087c:	491b      	ldr	r1, [pc, #108]	; (80008ec <rtc_read+0x9c>)
 800087e:	fb01 f202 	mul.w	r2, r1, r2
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	617b      	str	r3, [r7, #20]
	}
	// Calculate hours, minutes, and seconds from the counter value
	*hours = (uint8_t) (time_counter / 3600);
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <rtc_read+0xa0>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0adb      	lsrs	r3, r3, #11
 8000890:	b2da      	uxtb	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	701a      	strb	r2, [r3, #0]
	time_counter %= 3600;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <rtc_read+0xa0>)
 800089a:	fba2 1203 	umull	r1, r2, r2, r3
 800089e:	0ad2      	lsrs	r2, r2, #11
 80008a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80008a4:	fb01 f202 	mul.w	r2, r1, r2
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	617b      	str	r3, [r7, #20]
	*minutes = (uint8_t) (time_counter / 60);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <rtc_read+0xa4>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	095b      	lsrs	r3, r3, #5
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	701a      	strb	r2, [r3, #0]
	*seconds = (uint8_t) (time_counter % 60);
 80008bc:	6979      	ldr	r1, [r7, #20]
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <rtc_read+0xa4>)
 80008c0:	fba3 2301 	umull	r2, r3, r3, r1
 80008c4:	095a      	lsrs	r2, r3, #5
 80008c6:	4613      	mov	r3, r2
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	1aca      	subs	r2, r1, r3
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	701a      	strb	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40002800 	.word	0x40002800
 80008e4:	0001517f 	.word	0x0001517f
 80008e8:	c22e4507 	.word	0xc22e4507
 80008ec:	00015180 	.word	0x00015180
 80008f0:	91a2b3c5 	.word	0x91a2b3c5
 80008f4:	88888889 	.word	0x88888889

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <__NVIC_EnableIRQ+0x34>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100

08000930 <delay_ms>:

#include "rtc_delay.h"

int timerTick = 0;

void delay_ms(int ms) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	timerTick = 0;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <delay_ms+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
	TIM4->CR1 |= 1 << 0;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <delay_ms+0x48>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <delay_ms+0x48>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6013      	str	r3, [r2, #0]
	while (timerTick < (ms * 1000))
 800094a:	bf00      	nop
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000952:	fb03 f202 	mul.w	r2, r3, r2
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <delay_ms+0x44>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	dcf6      	bgt.n	800094c <delay_ms+0x1c>
		;
	TIM4->CR1 &= ~TIM_CR1_CEN;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <delay_ms+0x48>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <delay_ms+0x48>)
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	6013      	str	r3, [r2, #0]

}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	2000002c 	.word	0x2000002c
 8000978:	40000800 	.word	0x40000800

0800097c <TIM4_IRQHandler>:

	TIM4->CR1 &= ~TIM_CR1_CEN;

}

void TIM4_IRQHandler(void) {
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	timerTick++;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <TIM4_IRQHandler+0x24>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <TIM4_IRQHandler+0x24>)
 8000988:	6013      	str	r3, [r2, #0]

	TIM4->SR &= ~TIM_SR_UIF;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <TIM4_IRQHandler+0x28>)
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <TIM4_IRQHandler+0x28>)
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	6113      	str	r3, [r2, #16]
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000002c 	.word	0x2000002c
 80009a4:	40000800 	.word	0x40000800

080009a8 <timer4_Init>:

void timer4_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= 1 << 2;  // timer clock enable
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <timer4_Init+0x4c>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <timer4_Init+0x4c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = 0;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <timer4_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 72;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <timer4_Init+0x50>)
 80009c0:	2248      	movs	r2, #72	; 0x48
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CR1 |= TIM_CR1_URS;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <timer4_Init+0x50>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <timer4_Init+0x50>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6013      	str	r3, [r2, #0]
	TIM4->DIER |= TIM_DIER_UIE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <timer4_Init+0x50>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <timer4_Init+0x50>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= TIM_EGR_UG;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <timer4_Init+0x50>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <timer4_Init+0x50>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(TIM4_IRQn);
 80009e8:	201e      	movs	r0, #30
 80009ea:	f7ff ff85 	bl	80008f8 <__NVIC_EnableIRQ>

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40000800 	.word	0x40000800

080009fc <__NVIC_EnableIRQ>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4906      	ldr	r1, [pc, #24]	; (8000a30 <__NVIC_EnableIRQ+0x34>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <uart_init>:
 */

#include "rtc_uart.h"
char temp_uart_data = 0;
//char value[10] ={0};
void uart_init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

	AFIO->MAPR |= 1 << 2; // remap uart to pb6 for tx pb7 for rx
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <uart_init+0x84>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <uart_init+0x84>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6053      	str	r3, [r2, #4]
	RCC->APB2ENR |= 1 << 14;  //  enable usart1 clock
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <uart_init+0x88>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <uart_init+0x88>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 1 << 3;  // enable port A since TX = PA9 and RX = PA10
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <uart_init+0x88>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <uart_init+0x88>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 1 << 0;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <uart_init+0x88>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <uart_init+0x88>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]

	GPIOB->CRL &= ~(0x0F << 24);   //clearing tx pin to make all zeros
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <uart_init+0x8c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <uart_init+0x8c>)
 8000a6e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000a72:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x0B << 24); //setting the Tx pin to output, and alternate function push pull 1011
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <uart_init+0x8c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <uart_init+0x8c>)
 8000a7a:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8000a7e:	6013      	str	r3, [r2, #0]
	// setting the rx pin is not necessary, because at reset the pins are set as input  ** TAKE NOTE*
	//GPIOB ->CRL &= ~(0x0F << 28);   //clearing rx pin to make all zeros
	//GPIOB ->CRL |= (1 << 30);    //setting the rx pin to input

	//setting the baudrate in BRR register
	USART1->BRR = 0x1D4C;	//0x271;//0x1D4C; // setting the baudrate to 9600
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <uart_init+0x90>)
 8000a82:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000a86:	609a      	str	r2, [r3, #8]

	// enabling interrupt on uasart1 for tx and rx
	//USART2 -> CR1 |= (0xA0 <<0);
	USART1->CR1 |= 1 << 5;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <uart_init+0x90>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <uart_init+0x90>)
 8000a8e:	f043 0320 	orr.w	r3, r3, #32
 8000a92:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 |= USART_CR1_RXNEIE;

	// enabling the tx, rx and uart enable7
	USART1->CR1 |= (3 << 2); // enabling tx and rx
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <uart_init+0x90>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <uart_init+0x90>)
 8000a9a:	f043 030c 	orr.w	r3, r3, #12
 8000a9e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1 << 13);   // enabling usart1
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <uart_init+0x90>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <uart_init+0x90>)
 8000aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aaa:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 8000aac:	2025      	movs	r0, #37	; 0x25
 8000aae:	f7ff ffa5 	bl	80009fc <__NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40013800 	.word	0x40013800

08000ac8 <USART1_IRQHandler>:

/////

void USART1_IRQHandler(void) {
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

	if ( USART1->SR & 0x20) {
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <USART1_IRQHandler+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0320 	and.w	r3, r3, #32
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d004      	beq.n	8000ae2 <USART1_IRQHandler+0x1a>
		temp_uart_data = (char) USART1->DR;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <USART1_IRQHandler+0x28>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <USART1_IRQHandler+0x2c>)
 8000ae0:	701a      	strb	r2, [r3, #0]

		//GPIOA->ODR |= (1 << 11);
	}
	if (USART1->SR & 0x80) {
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <USART1_IRQHandler+0x28>)
 8000ae4:	681b      	ldr	r3, [r3, #0]

	}

}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40013800 	.word	0x40013800
 8000af4:	20000030 	.word	0x20000030

08000af8 <uart_print>:

void uart_print(uint8_t data) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	USART1->DR = data;
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <uart_print+0x2c>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	6053      	str	r3, [r2, #4]

	while (!(USART1->SR & 0x40))
 8000b08:	bf00      	nop
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <uart_print+0x2c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f9      	beq.n	8000b0a <uart_print+0x12>
		;
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40013800 	.word	0x40013800

08000b28 <uart_printf>:

void uart_printf(char *str) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	while (*str) {
 8000b30:	e007      	b.n	8000b42 <uart_printf+0x1a>
		uart_print(*str);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffde 	bl	8000af8 <uart_print>
		str++;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f3      	bne.n	8000b32 <uart_printf+0xa>

	}

}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <uart_printn>:

void uart_printn(float x) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
//	sprintf(value1, "%d", d_numb);
//	//lcd_clear();
//	uart_print('\0');
//	uart_printf((char*) value1);

	uint8_t a = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	75fb      	strb	r3, [r7, #23]
	uint8_t b = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	75bb      	strb	r3, [r7, #22]
	uint8_t c = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	757b      	strb	r3, [r7, #21]
	uint8_t d = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	753b      	strb	r3, [r7, #20]
	uint16_t e, g, h, t = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	827b      	strh	r3, [r7, #18]

	t = x;
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fcad 	bl	80004d0 <__aeabi_f2uiz>
 8000b76:	4603      	mov	r3, r0
 8000b78:	827b      	strh	r3, [r7, #18]
	a = (t / 1000);
 8000b7a:	8a7b      	ldrh	r3, [r7, #18]
 8000b7c:	4a50      	ldr	r2, [pc, #320]	; (8000cc0 <uart_printn+0x16c>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	099b      	lsrs	r3, r3, #6
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	75fb      	strb	r3, [r7, #23]
	b = ((t / 100) % 10);
 8000b88:	8a7b      	ldrh	r3, [r7, #18]
 8000b8a:	4a4e      	ldr	r2, [pc, #312]	; (8000cc4 <uart_printn+0x170>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	095b      	lsrs	r3, r3, #5
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b4c      	ldr	r3, [pc, #304]	; (8000cc8 <uart_printn+0x174>)
 8000b96:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9a:	08d9      	lsrs	r1, r3, #3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	75bb      	strb	r3, [r7, #22]
	c = ((t / 10) % 10);
 8000baa:	8a7b      	ldrh	r3, [r7, #18]
 8000bac:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <uart_printn+0x174>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <uart_printn+0x174>)
 8000bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bbc:	08d9      	lsrs	r1, r3, #3
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	757b      	strb	r3, [r7, #21]
	d = (t % 10);
 8000bcc:	8a7a      	ldrh	r2, [r7, #18]
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <uart_printn+0x174>)
 8000bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd4:	08d9      	lsrs	r1, r3, #3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	753b      	strb	r3, [r7, #20]
	x = x - t;
 8000be4:	8a7b      	ldrh	r3, [r7, #18]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc1e 	bl	8000428 <__aeabi_i2f>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fb63 	bl	80002bc <__aeabi_fsub>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	607b      	str	r3, [r7, #4]
	e = x * 100;
 8000bfa:	4934      	ldr	r1, [pc, #208]	; (8000ccc <uart_printn+0x178>)
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff faa5 	bl	800014c <__aeabi_fmul>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fc63 	bl	80004d0 <__aeabi_f2uiz>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	823b      	strh	r3, [r7, #16]
	g = e / 10;
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <uart_printn+0x174>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	81fb      	strh	r3, [r7, #14]
	h = e % 10;
 8000c1a:	8a3a      	ldrh	r2, [r7, #16]
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <uart_printn+0x174>)
 8000c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c22:	08d9      	lsrs	r1, r3, #3
 8000c24:	460b      	mov	r3, r1
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	81bb      	strh	r3, [r7, #12]

	if (a == 0) {
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <uart_printn+0xee>

	} else {
		uart_print(a + 0x30);
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	3330      	adds	r3, #48	; 0x30
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5b 	bl	8000af8 <uart_print>
	}
	if ((b == 0) && (a == 0)) {
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <uart_printn+0xfa>
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <uart_printn+0x106>

	} else {
		uart_print(b + 0x30);
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
 8000c50:	3330      	adds	r3, #48	; 0x30
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff4f 	bl	8000af8 <uart_print>
	}

	if ((b == 0) && (a == 0) && (c == 0)) {
 8000c5a:	7dbb      	ldrb	r3, [r7, #22]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d105      	bne.n	8000c6c <uart_printn+0x118>
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <uart_printn+0x118>
 8000c66:	7d7b      	ldrb	r3, [r7, #21]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <uart_printn+0x124>

	} else {
		uart_print(c + 0x30);
 8000c6c:	7d7b      	ldrb	r3, [r7, #21]
 8000c6e:	3330      	adds	r3, #48	; 0x30
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff40 	bl	8000af8 <uart_print>
	}
	uart_print(d + 0x30);
 8000c78:	7d3b      	ldrb	r3, [r7, #20]
 8000c7a:	3330      	adds	r3, #48	; 0x30
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff3a 	bl	8000af8 <uart_print>
	delay_ms(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fe53 	bl	8000930 <delay_ms>
	uart_print('.');
 8000c8a:	202e      	movs	r0, #46	; 0x2e
 8000c8c:	f7ff ff34 	bl	8000af8 <uart_print>
	delay_ms(5);
 8000c90:	2005      	movs	r0, #5
 8000c92:	f7ff fe4d 	bl	8000930 <delay_ms>
	uart_print(g + 0x30);
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	3330      	adds	r3, #48	; 0x30
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff2a 	bl	8000af8 <uart_print>
	delay_ms(5);
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	f7ff fe43 	bl	8000930 <delay_ms>
	uart_print(h + 0x30);
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	3330      	adds	r3, #48	; 0x30
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff20 	bl	8000af8 <uart_print>

}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	10624dd3 	.word	0x10624dd3
 8000cc4:	51eb851f 	.word	0x51eb851f
 8000cc8:	cccccccd 	.word	0xcccccccd
 8000ccc:	42c80000 	.word	0x42c80000

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_MspInit+0x40>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_MspInit+0x40>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_MspInit+0x40>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_MspInit+0x40>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_MspInit+0x40>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_MspInit+0x40>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5a:	f000 f875 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
	...

08000d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff fff7 	bl	8000d62 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d76:	490c      	ldr	r1, [pc, #48]	; (8000da8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d8c:	4c09      	ldr	r4, [pc, #36]	; (8000db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 fd33 	bl	8001804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9e:	f7ff fbb7 	bl	8000510 <main>
  bx lr
 8000da2:	4770      	bx	lr
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dac:	080018d0 	.word	0x080018d0
  ldr r2, =_sbss
 8000db0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db4:	20000038 	.word	0x20000038

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_Init+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_Init+0x28>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f907 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f000 f808 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff ff7a 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f911 	bl	800102e <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e24:	f000 f8e7 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000034 	.word	0x20000034

08000e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000034 	.word	0x20000034

08000e80 <__NVIC_SetPriorityGrouping>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc0:	f7ff ff90 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff49 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff5e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff90 	bl	8000f38 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5f 	bl	8000ee4 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb0 	bl	8000f9c <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e272      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8087 	beq.w	8001176 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001068:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b04      	cmp	r3, #4
 8001072:	d00c      	beq.n	800108e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001074:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b08      	cmp	r3, #8
 800107e:	d112      	bne.n	80010a6 <HAL_RCC_OscConfig+0x5e>
 8001080:	4b8c      	ldr	r3, [pc, #560]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108c:	d10b      	bne.n	80010a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108e:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d06c      	beq.n	8001174 <HAL_RCC_OscConfig+0x12c>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d168      	bne.n	8001174 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e24c      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x76>
 80010b0:	4b80      	ldr	r3, [pc, #512]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a7f      	ldr	r2, [pc, #508]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e02e      	b.n	800111c <HAL_RCC_OscConfig+0xd4>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x98>
 80010c6:	4b7b      	ldr	r3, [pc, #492]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a7a      	ldr	r2, [pc, #488]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a77      	ldr	r2, [pc, #476]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xd4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0xbc>
 80010ea:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a71      	ldr	r2, [pc, #452]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6f      	ldr	r3, [pc, #444]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6e      	ldr	r2, [pc, #440]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xd4>
 8001104:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b68      	ldr	r3, [pc, #416]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a67      	ldr	r2, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fea2 	bl	8000e6c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fe9e 	bl	8000e6c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e200      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xe4>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fe8e 	bl	8000e6c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fe8a 	bl	8000e6c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1ec      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x10c>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d063      	beq.n	800124a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001182:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800118e:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x18c>
 800119a:	4b46      	ldr	r3, [pc, #280]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x176>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1c0      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4939      	ldr	r1, [pc, #228]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	e03a      	b.n	800124a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fe43 	bl	8000e6c <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fe3f 	bl	8000e6c <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e1a1      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4927      	ldr	r1, [pc, #156]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fe22 	bl	8000e6c <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fe1e 	bl	8000e6c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e180      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d03a      	beq.n	80012cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d019      	beq.n	8001292 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_RCC_OscConfig+0x274>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fe02 	bl	8000e6c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fdfe 	bl	8000e6c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e160      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f000 fa9c 	bl	80017c8 <RCC_Delay>
 8001290:	e01c      	b.n	80012cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_RCC_OscConfig+0x274>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fde8 	bl	8000e6c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129e:	e00f      	b.n	80012c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fde4 	bl	8000e6c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d908      	bls.n	80012c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e146      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	42420000 	.word	0x42420000
 80012bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	4b92      	ldr	r3, [pc, #584]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e9      	bne.n	80012a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80a6 	beq.w	8001426 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10d      	bne.n	8001306 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a87      	ldr	r2, [pc, #540]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b85      	ldr	r3, [pc, #532]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_RCC_OscConfig+0x4c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x4c8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a7e      	ldr	r2, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x4c8>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fda5 	bl	8000e6c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fda1 	bl	8000e6c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e103      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b75      	ldr	r3, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x4c8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x312>
 800134c:	4b6f      	ldr	r3, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a6e      	ldr	r2, [pc, #440]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	e02d      	b.n	80013b6 <HAL_RCC_OscConfig+0x36e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x334>
 8001362:	4b6a      	ldr	r3, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a69      	ldr	r2, [pc, #420]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a66      	ldr	r2, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	6213      	str	r3, [r2, #32]
 800137a:	e01c      	b.n	80013b6 <HAL_RCC_OscConfig+0x36e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b05      	cmp	r3, #5
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0x356>
 8001384:	4b61      	ldr	r3, [pc, #388]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a60      	ldr	r2, [pc, #384]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a5d      	ldr	r2, [pc, #372]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6213      	str	r3, [r2, #32]
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0x36e>
 800139e:	4b5b      	ldr	r3, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a5a      	ldr	r2, [pc, #360]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d015      	beq.n	80013ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fd55 	bl	8000e6c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fd51 	bl	8000e6c <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0b1      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0ee      	beq.n	80013c6 <HAL_RCC_OscConfig+0x37e>
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fd3f 	bl	8000e6c <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f0:	e00a      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fd3b 	bl	8000e6c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e09b      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1ee      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d105      	bne.n	8001426 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8087 	beq.w	800153e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b08      	cmp	r3, #8
 800143a:	d061      	beq.n	8001500 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d146      	bne.n	80014d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_RCC_OscConfig+0x4cc>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fd0f 	bl	8000e6c <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff fd0b 	bl	8000e6c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e06d      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d108      	bne.n	800148c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	4921      	ldr	r1, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a19      	ldr	r1, [r3, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	430b      	orrs	r3, r1
 800149e:	491b      	ldr	r1, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x4cc>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fcdf 	bl	8000e6c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fcdb 	bl	8000e6c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e03d      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x46a>
 80014d0:	e035      	b.n	800153e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x4cc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcc8 	bl	8000e6c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fcc4 	bl	8000e6c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e026      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x498>
 80014fe:	e01e      	b.n	800153e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e019      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
 800150c:	40021000 	.word	0x40021000
 8001510:	40007000 	.word	0x40007000
 8001514:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_RCC_OscConfig+0x500>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	429a      	cmp	r2, r3
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0d0      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b6a      	ldr	r3, [pc, #424]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4965      	ldr	r1, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e073      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06b      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4936      	ldr	r1, [pc, #216]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fc16 	bl	8000e6c <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fc12 	bl	8000e6c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e053      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d210      	bcs.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1cc>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb74 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	080018a4 	.word	0x080018a4
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x30>
 800174a:	2b08      	cmp	r3, #8
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x36>
 800174e:	e027      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001752:	613b      	str	r3, [r7, #16]
      break;
 8001754:	e027      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d010      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	0c5b      	lsrs	r3, r3, #17
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001782:	fb03 f202 	mul.w	r2, r3, r2
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e004      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	613b      	str	r3, [r7, #16]
      break;
 800179e:	e002      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017a2:	613b      	str	r3, [r7, #16]
      break;
 80017a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a6:	693b      	ldr	r3, [r7, #16]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	007a1200 	.word	0x007a1200
 80017bc:	080018b4 	.word	0x080018b4
 80017c0:	080018c4 	.word	0x080018c4
 80017c4:	003d0900 	.word	0x003d0900

080017c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <RCC_Delay+0x34>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <RCC_Delay+0x38>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a5b      	lsrs	r3, r3, #9
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017e4:	bf00      	nop
  }
  while (Delay --);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	60fa      	str	r2, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f9      	bne.n	80017e4 <RCC_Delay+0x1c>
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000000 	.word	0x20000000
 8001800:	10624dd3 	.word	0x10624dd3

08001804 <__libc_init_array>:
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	2600      	movs	r6, #0
 8001808:	4d0c      	ldr	r5, [pc, #48]	; (800183c <__libc_init_array+0x38>)
 800180a:	4c0d      	ldr	r4, [pc, #52]	; (8001840 <__libc_init_array+0x3c>)
 800180c:	1b64      	subs	r4, r4, r5
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	42a6      	cmp	r6, r4
 8001812:	d109      	bne.n	8001828 <__libc_init_array+0x24>
 8001814:	f000 f822 	bl	800185c <_init>
 8001818:	2600      	movs	r6, #0
 800181a:	4d0a      	ldr	r5, [pc, #40]	; (8001844 <__libc_init_array+0x40>)
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <__libc_init_array+0x44>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	42a6      	cmp	r6, r4
 8001824:	d105      	bne.n	8001832 <__libc_init_array+0x2e>
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	f855 3b04 	ldr.w	r3, [r5], #4
 800182c:	4798      	blx	r3
 800182e:	3601      	adds	r6, #1
 8001830:	e7ee      	b.n	8001810 <__libc_init_array+0xc>
 8001832:	f855 3b04 	ldr.w	r3, [r5], #4
 8001836:	4798      	blx	r3
 8001838:	3601      	adds	r6, #1
 800183a:	e7f2      	b.n	8001822 <__libc_init_array+0x1e>
 800183c:	080018c8 	.word	0x080018c8
 8001840:	080018c8 	.word	0x080018c8
 8001844:	080018c8 	.word	0x080018c8
 8001848:	080018cc 	.word	0x080018cc

0800184c <memset>:
 800184c:	4603      	mov	r3, r0
 800184e:	4402      	add	r2, r0
 8001850:	4293      	cmp	r3, r2
 8001852:	d100      	bne.n	8001856 <memset+0xa>
 8001854:	4770      	bx	lr
 8001856:	f803 1b01 	strb.w	r1, [r3], #1
 800185a:	e7f9      	b.n	8001850 <memset+0x4>

0800185c <_init>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	bf00      	nop
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr

08001868 <_fini>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr
